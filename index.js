const { Telegraf } = require("telegraf");
const axios = require("axios");
require("dotenv").config();

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –°—Ç–∞—Ä—Ç —Å Web App-–∫–Ω–æ–ø–∫–æ–π
bot.start((ctx) => {
  ctx.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É.", {
    reply_markup: {
      keyboard: [
        [
          {
            text: "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
            web_app: {
              url: "https://telegram-webapp-j8de.onrender.com" // —Ç–≤–æ—è —Ñ–æ—Ä–º–∞
            }
          }
        ]
      ],
      resize_keyboard: true
    }
  });
});

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ (–µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –Ω–∞–∂–∞–ª –ø–æ-—Å—Ç–∞—Ä–æ–º—É)
bot.hears("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", async (ctx) => {
  ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É:");
  bot.once("text", async (ctx2) => {
    const userMessage = ctx2.message.text;

    try {
      const response = await axios.post("https://api.openai.com/v1/chat/completions", {
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: userMessage }],
      }, {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          "Content-Type": "application/json",
        },
      });

      const reply = response.data.choices[0].message.content;
      ctx2.reply(`–û—Ç–≤–µ—Ç –æ—Ç OpenAI: ${reply}`);

    } catch (err) {
      console.error(err);
      ctx2.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI.");
    }
  });
});

// üß© –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
bot.on("web_app_data", async (ctx) => {
  const userMessage = ctx.webAppData.data;

  try {
    const response = await axios.post("https://api.openai.com/v1/chat/completions", {
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: userMessage }],
    }, {
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
    });

    const reply = response.data.choices[0].message.content;
    await ctx.reply(`–û—Ç–≤–µ—Ç –æ—Ç OpenAI: ${reply}`);
  } catch (err) {
    console.error(err);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI.");
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");

// –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏
bot.catch((err, ctx) => {
  console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', err);
  if (ctx && ctx.reply) {
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
});
