const { Telegraf } = require("telegraf");
const axios = require("axios");
require("dotenv").config();

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –°—Ç–∞—Ä—Ç ‚Äî –∫–Ω–æ–ø–∫–∞ Web App (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ)
bot.start((ctx) => {
  if (ctx.chat.type !== "private") {
    return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.");
  }

  ctx.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É.", {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
            web_app: {
              url: process.env.WEB_APP_URL, // ‚Üê —Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            },
          },
        ],
      ],
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
bot.on("web_app_data", async (ctx) => {
  const userMessage = ctx.webAppData?.data;

  if (!userMessage || userMessage.trim() === "") {
    return ctx.reply("–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }

  if (userMessage.length > 1000) {
    return ctx.reply("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –£–∫–æ—Ä–æ—Ç–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.");
  }

  try {
    const response = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-4o", // ‚Üê –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT-4o
        messages: [{ role: "user", content: userMessage }],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    const reply = response.data.choices[0].message.content;
    await ctx.reply(`–û—Ç–≤–µ—Ç –æ—Ç OpenAI:\n\n${reply}`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤ OpenAI:", err?.response?.data || err);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI.");
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—á–µ—Ä–µ–∑ long polling)
bot.launch().then(() => {
  console.log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (long polling)");
}).catch((err) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:", err.description || err.message);
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", err);
  if (ctx?.reply) {
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
  }
});


